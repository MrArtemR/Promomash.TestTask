// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Promomash.TestTask.Persistence.DatabaseContext;

#nullable disable

namespace Promomash.TestTask.Persistence.Migrations
{
    [DbContext(typeof(TestTaskContext))]
    partial class TestTaskContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Promomash.TestTask.Domain.Entities.CountryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Countries", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2024, 7, 20, 13, 54, 1, 798, DateTimeKind.Utc).AddTicks(9092),
                            Name = "Russia"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2024, 7, 20, 13, 54, 1, 798, DateTimeKind.Utc).AddTicks(9095),
                            Name = "Kazakhstan"
                        });
                });

            modelBuilder.Entity("Promomash.TestTask.Domain.Entities.ProvinceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Provinces", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Created = new DateTime(2024, 7, 20, 13, 54, 1, 798, DateTimeKind.Utc).AddTicks(9124),
                            Name = "Moscow"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Created = new DateTime(2024, 7, 20, 13, 54, 1, 798, DateTimeKind.Utc).AddTicks(9125),
                            Name = "Sanct Peterburg"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 2,
                            Created = new DateTime(2024, 7, 20, 13, 54, 1, 798, DateTimeKind.Utc).AddTicks(9126),
                            Name = "Atyrau region"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 2,
                            Created = new DateTime(2024, 7, 20, 13, 54, 1, 798, DateTimeKind.Utc).AddTicks(9127),
                            Name = "Kostanay region"
                        });
                });

            modelBuilder.Entity("Promomash.TestTask.Domain.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswrdHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("Login", "Promomash.TestTask.Domain.Entities.UserEntity.Login#Login", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Promomash.TestTask.Domain.Entities.ProvinceEntity", b =>
                {
                    b.HasOne("Promomash.TestTask.Domain.Entities.CountryEntity", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Promomash.TestTask.Domain.Entities.UserEntity", b =>
                {
                    b.HasOne("Promomash.TestTask.Domain.Entities.CountryEntity", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Promomash.TestTask.Domain.Entities.ProvinceEntity", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Province");
                });
#pragma warning restore 612, 618
        }
    }
}
